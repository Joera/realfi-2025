(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))n(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function t(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(r){if(r.ep)return;r.ep=!0;const i=t(r);fetch(r.href,i)}})();const c=()=>{try{const e=new URL(window.location.href).searchParams,t=e.get("s"),n=e.get("b"),r=e.get("sig");return!t||!n||!r?(console.error("Missing required parameters:",{secret:!!t,batchId:!!n,signature:!!r}),null):{secret:decodeURIComponent(t),batchId:decodeURIComponent(n),signature:decodeURIComponent(r)}}catch(o){return console.error("Error parsing URL:",o),null}};class s{constructor(){this.isDevelopment=window.location.hostname==="localhost",this.rpId=window.location.hostname,this.rpName="s3ntiment"}isSupported(){return!!(window.PublicKeyCredential&&navigator.credentials&&navigator.credentials.create)}async getAuthenticatorInfo(){if(!this.isSupported())return{platform:!1,crossPlatform:!1,userVerifying:!1};try{const[e,t,n]=await Promise.all([PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable(),PublicKeyCredential.isConditionalMediationAvailable?.()||Promise.resolve(!1),PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()]);return{platform:e,crossPlatform:t,userVerifying:n}}catch{return{platform:!1,crossPlatform:!1,userVerifying:!1}}}async createDeviceCredential(){if(!this.isSupported())throw new Error("WebAuthn not supported on this device");try{const e=crypto.getRandomValues(new Uint8Array(32)),t=crypto.getRandomValues(new Uint8Array(32)),n=await navigator.credentials.create({publicKey:{challenge:e,rp:{name:this.rpName,id:this.rpId},user:{id:t,name:"s3ntiment-user",displayName:"S3ntiment User"},pubKeyCredParams:[{alg:-7,type:"public-key"},{alg:-257,type:"public-key"}],authenticatorSelection:{authenticatorAttachment:"platform",userVerification:"required",residentKey:"required"},timeout:6e4,attestation:"none"}});if(!n)throw new Error("Failed to create WebAuthn credential");const r=n.response,i=this.arrayBufferToHex(n.rawId),a=await this.generateNullifier(n.rawId);return console.log("WebAuthn credential created successfully"),{credentialId:i,publicKey:r.publicKey,deviceNullifier:a}}catch(e){throw console.error("WebAuthn creation failed:",e),e.name==="NotSupportedError"?new Error("Device doesn't support biometric authentication"):e.name==="NotAllowedError"?new Error("Authentication was cancelled or failed"):e.name==="SecurityError"?new Error("Security requirements not met"):new Error("Device authentication failed: "+e.message)}}async authenticateDevice(){if(!this.isSupported())throw new Error("WebAuthn not supported on this device");try{const e=crypto.getRandomValues(new Uint8Array(32)),t=await navigator.credentials.get({publicKey:{challenge:e,timeout:6e4,userVerification:"required"}});if(!t)throw new Error("Authentication failed or cancelled");const n=this.arrayBufferToHex(t.rawId),r=await this.generateNullifier(t.rawId);return console.log("WebAuthn authentication successful"),{credentialId:n,publicKey:t.rawId,deviceNullifier:r}}catch(e){throw console.error("WebAuthn authentication failed:",e),e.name==="NotAllowedError"?new Error("Authentication cancelled or no credential found"):new Error("Device authentication failed: "+e.message)}}async getOrCreateDeviceCredential(){if(this.isDevelopment){const e=`dev-${navigator.userAgent.slice(0,20)}-${Date.now()}`;return{credentialId:e,publicKey:new ArrayBuffer(32),deviceNullifier:await this.hashString(e)}}return await this.createDeviceCredential()}async hashString(e){try{const n=new TextEncoder().encode(e),r=await crypto.subtle.digest("SHA-256",n);return this.arrayBufferToHex(r)}catch{return this.simpleHash(e)}}generateNullifier(e){const t=new TextEncoder,n=new Uint8Array([...t.encode("s3ntiment-device:"),...new Uint8Array(e)]);return crypto.subtle.digest("SHA-256",n).then(r=>this.arrayBufferToHex(r)).catch(()=>this.simpleHash(this.arrayBufferToHex(e)))}simpleHash(e){let t=0;for(let n=0;n<e.length;n++){const r=e.charCodeAt(n);t=(t<<5)-t+r,t=t&t}return Math.abs(t).toString(16).padStart(8,"0")}arrayBufferToHex(e){return Array.from(new Uint8Array(e)).map(t=>t.toString(16).padStart(2,"0")).join("")}async getStatusMessage(){if(!this.isSupported())return"Device authentication not supported";const e=await this.getAuthenticatorInfo();return e.platform?"Ready for fingerprint/face authentication":e.crossPlatform?"Ready for security key authentication":"Authentication available"}}async function l(){const o=new s;if(!o.isSupported())throw new Error("This device doesn't support secure authentication. Please use a device with fingerprint, face recognition, or PIN.");const e=await o.getStatusMessage();console.log("Authentication status:",e);const t=document.createElement("div");t.innerHTML=`
    <div id="auth-modal" style="
      position: fixed; top: 0; left: 0; width: 100%; height: 100%;
      background: rgba(0,0,0,0.7); display: flex; align-items: center; justify-content: center;
      font-family: system-ui; z-index: 1000;
    ">
      <div style="
        background: white; padding: 30px; border-radius: 10px; text-align: center;
        max-width: 400px; margin: 20px;
      ">
        <h3>Device Authentication Required</h3>
        <p>${e}</p>
        <p>Please authenticate with your fingerprint, face, or device PIN</p>
        <div id="auth-spinner" style="margin: 20px 0;">‚è≥ Waiting for authentication...</div>
        <button id="cancel-auth" style="margin-top: 20px;">Cancel</button>
      </div>
    </div>
  `,document.body.appendChild(t);try{const n=document.getElementById("cancel-auth");let r=!1;n?.addEventListener("click",()=>{r=!0,document.body.removeChild(t)});const i=await o.getOrCreateDeviceCredential();if(r)throw new Error("Authentication cancelled");return document.body.removeChild(t),i}catch(n){throw document.body.contains(t)&&document.body.removeChild(t),n}}const u=async()=>{const o=c();console.log(o);try{const e=await l();console.log("Device nullifier:",e.deviceNullifier)}catch(e){console.error("Authentication failed:",e.message)}};u();
